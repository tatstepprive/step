Voc:
PRM=prm=primary
STB=stb=standby
DG=dg=dataguard
LNS=log network service
RFB=remote fetch service
LSS=LNS+RKB=log ship service
MRP=managed recovery process
LAS=log apply service
ORLF=online redo log files
SRLF=SRL=standby redo log files
FAL=fetch archive log
==============================
Standby (stb) types:
1 Physical stb
2 Snapshot stb
3 Active DG
4 Logical stb
==============================
###########################################
#MANUAL CONFIGURATION (to understand basis)
#MANUAL CONFIGURATION ON PRM
###########################################
#1.PRM in sqlplus enable archive log
archive log list;
--change to archive mode
shut immediate;
startup mount;
alter database archivelog;
alter database open;
archive log list;
#-----------------------------
#PRM in sqlplus 
select name, open_mode from v$database;
--open_mode=READ WRITE
#----------------------------
#2.PRM force logging (redo logs should be always generated even with NOLOGGING flag on transaction)
select name, force_logging from v$database;
--force_logging=NO
alter database force logging;
select name, force_logging from v$database;
--force_logging=YES
#------------------------------
#3.PRM to manage files (when add/drop datafile on PRM then the datafile should be added/dropped on STB)
show parameter standby_file_management;
alter system set standby_file_management='AUTO';
#-----------------------------
#4.PRM create standby log files srlf (stanby redo log files) (they needed when PRM become STB by manual switch if needed)
select group#, member from v$logfile;
--default 1,2,3 group, should be 1,2,3,4,5 => 5 redo groups
--if there is 3 redo groups, add more till 5 , for size check size used for other redo logs
alter database add logfile group x '/path/name.log' size 50m;
--add 6 standby redo=nr redo+1, for size check size redo logs
alter database add STANDBY logfile group x '/path/name.log' size 50m;
--show only standby logs
select group#, thread#, sequence#, archived, status from v$standby_log;
--status=UNASSIGNED (on PRM)
#------------------------------
#5.PRM create pwd file for STB 
--methode 1 scp 
$ORACLE_HOME/dbs/orapw<sid> oracle@stb_host:$ORACLE_HOME/dbs
--methode 2
sqlalter system set remote_login_passwordfile=exclusive scope=spfile;
on os: cd $ORACLE_HOME/dbs
???
scp orapw<sid_stb> oracle@stb_host:$ORACLE_HOME/dbs
show parameter remote_login_passwordfile
--value=EXCLUSIVE
#----------------------------------------------
#6.PRM check db unique name
show parameter db_unique_name;
--by default sid=db_unique_name but you can set that it differs like sid=PRM db_unique_name=PRM_PRMHOST
#---------------------------------------------
#7.PRM enable flashback
alter system set db_recovery_file_dest_size=45G;
--or more ex: 190G
alter system set db_recovery_file_dest='/ora/app/oracle/fast_recovery_area':
show parameter recovery;
alter system flashback on;
--if flashback is OFF (NO) then only clonning from STB will recover PRM after crash
--if flashback is ON you can choose clonning or recovery using flashback (faster)
#-----------------------------------------------
#8.PRM configure network
#8A.PRM configure tnsnames
nano $ORACLE_HOME/network/admin/tnsnames.ora
PRMSID =
  (DESCRIPTION =
    (ADDRESS = (PROTOCOL = TCP)(HOST = prmhost)(PORT = 1521))
    (CONNECT_DATA =
        (SERVER = DEDICATED)
        (SERVICE_NAME = prmsid)
    )
  )
#8B.PRM configure listener
nano $ORACLE_HOME/network/admin/listener.ora
LISTENER =
  (DESCRIPTION_LIST =
    (DESCRIPTION =
      (ADDRESS = (PROTOCOL = TCP)(HOST = prmhost)(PORT = 1521))
      (ADDRESS = (PROTOCOL = IPC)(KEY = EXTPROC1521))
    )
  )
SID_LIST_LISTENER =
  (SID_LIST =
    (SID_DESC =
        (SID_NAME = PLSExtProc)
        (ORACLE_HOME = /opt/oracle/app/oracle/product/12.1.0)
        (PROGRAM = extproc)
    )
    (SID_DESC =
        (SID_NAME = <PRMSID>)
        (ORACLE_HOME = /opt/oracle/app/oracle/product/12.1.0)
#        (GLOBAL_DBNAME=<PRMSID_PRMHOST>_DGMGRL)
        (GLOBAL_DBNAME=<PRMSID_PRMHOST>)
    )
  )
#8C.PRM restart listener
lsnrctl start listener
#8D.PRM check connection
tnsping <PRMSID>
#-----------------------------------------
#9PRM configure redo transport
show db_unique_name;
#set paremeter to start LNS (log network service)
alter system set log_archive_dest_2='service=<tns_alias_for_stb> valid_for=(online_logfiles,primary_role) db_unique_name=<stb>;
#setup FAL server (fetch archive log server) for when failover
alter system set fal_server='<stb_unique_name>'
#setup dataguard
alter system set log_archive_config='dg_config=(<prm>,<stb>)';
#------------------------------------------
###########################################
#MANUAL CONFIGURATION (to understand basis)
#MANUAL CONFIGURATION ON STB
###########################################
#1.PRM
create pfile='/tmp/init<stbsid>.ora from spfile;
scp /tmp/init<stbsid>.ora oracle@stb:/tmp
ssh oracle@stbhost
#2.STB nano /tmp/init<stbsid>
#change FAL_SERVER to prmsid
#change log_archive_dest_2='service=<prmsid> ... db_unique_name='<prm_sid>'
#add db_unique_name=<stb_sid>
#save
#3.STB create all data dirs used in /tmp/init<sidstb>.ora
mkdir A B C
create spfile from pfile='/tmp/init<sidstb>.ora'
ls $ORACLE_HOME/dbs
startup nomount;
exit; --exit or rman will not work
#4.PRM
rman target sys@prmsid #dont use rman target /
password:
RMAN> duplicate target database for standby from active database NOFILENAMECHECK;
#5.STB start MRP to continously apply redo logs (disconnect means run in background)
sql> alter database recover managed standby database disconnect;
#6.PRM verify
sql> set lines 999;
sql> select * from v$dataguard_status order by timestamp;
sql> select dest_id, status, destination, error from v$archive_dest where dest_id<=2;
#7.PRM fix ORA-16058 by restart dest2
sql>alter system set log_archive_dest_state_2='DEFER';
sql>alter system set log_archive_dest_state_2='ENABLE';
sql>clear screen
#8.STB show MRP running
sql>select process, status, sequence# from v$managed_standby;
#9.PRM show GAP
sql>select sequence#, first_time, next_time, applied, archived from v$archived_log where name=<stbsid> order by first_time;
sql>select status, gap_status from v$archive_dest_status where dest_id=2;
#10.STB show MRP0 process
sql>select process, status, sequence# from v$managed_standby 
--see MPR0 process
#11.PRM show current/next log sequence
sql>archive log list;
#12.PRM switch log/generate log sequence
sql>alter system switch logfile;
#13.STB
sql>select process, status, sequence# from v$managed_standby;
sql>select sequence#, applied, first_time, next_time, name, filename from v$archived_log order by sequence#;
#14.STB disable MRP and enable flashback, enable MRP
sql>alter database recover managed standby database cancel;
sql>alter database flashback on;
sql>alter database recover managed standby database disconnect;
#15.PRM configure archiver deletion policy
rman target /
rman> configure archivelog deletion policy to applied on all standby;
###############################################################################
#CREATE FAILOVER SERVICE
###############################################################################
select database_role from v$database;
--create procedure
create or replace procedure test_rw_service
is
v_role varchar(30);
begin
select database_role into v_role from v$instance;
if v_role='PRIMARY' then
dbms_service.start_service('test_rw');
else 
dbms_service.stop_service('test_rw');
end if;
end;
/
--create service
exec dbms_service.create_service(service_name=>'test_rw',aq_ha_notifications=>TRUE, failover_methode=>'BASIC',failover_type=>'SELECT', failover_retries=>30, failover_delay=>5);
--create triggers
create or replace trigger db_startup
after startup on database
begin
test_rw_service;
end;
/

create or replace trigger test_db_rolechange
after db_role_change on database
begin
test_rw_service;
end;
/

--tnsnames entry
test =
  (DESCRIPTION =
   (ADDRESS_LIST=
    (ADDRESS = (PROTOCOL = TCP)(HOST = prmhost)(PORT = 1521))
    (ADDRESS = (PROTOCOL = TCP)(HOST = stbhost)(PORT = 1521))
   )
    (CONNECT_DATA =
        (SERVICE_NAME = test_rw)
        (FAILOVER_MODE=
          (TYPE=SELECT)(METHOD=BASIC)(RETRIES=30)(DELAY=5
        )
    )
  )
###############################################################################
#MANUAL SWITCHOVER
###############################################################################
select name, open_mode, db_unique_name, database_role from v$database;
#1.PRM check GAP before switch over
select status, gap_status from v$archive_dest_status where dest_id=2;
#2.STP
select name, value, datum_time from v$dataguard_stats;
#3.PRM convert PRM to STB
select switchover_status from v$database
--see TO STANDBY or SESSIONS ACTIVE
alter database commit to switchover to physical standby with session shutdown;
shutdown immediate;
startup mount;
#4.STB
select switchover_status from v$database
--see TO PRIMARY
alter database commit to switchover to primary with session shutdown;
alter database open;
#5.STB or PRM
alter database recover managed standby database disconnect;
###############################################################################
#MANUAL FAILOVER
###############################################################################
--Let oracle clients wait is better than disconnect them
--You should test switch over 1/month
#1.PRM crash due reboot
#2.STB stop MRP
alter database recover managed standby database cancel;
alter database recover managed standby database finish;
#3.STB convert and open
select switchover_status from v$database;
--see TO PRIMARY
alter database commit to switchover to primary with session shutdown;
alter database open;
###############################################################################
#CLEAN shutdown PRM, STB
###############################################################################
#1.STB stop MRP
alter database recover managed standby database cancel;
shut immediate;
#2.PRM 
shut immediate;
###############################################################################
#REINSTATE OLD PRM
###############################################################################
--Using flashback method
#1.STB search SCN
select standby_became_primary_scn from v$database;
select to_char(standby_became_primary_scn) from v$database;
#2.PRM (old) start listener, db in mount and do flashback
lsnrctl start listener
sqlplus / as sysdba;
startup mount;
flashback database to scn <nr>;
alter database convert to physical standby;
shut immediate;
exit;
sqlplus / as sysdba;
startup mount
--start MRP
alter database recover managed standby database disconnect;
--check sync
select process, status, sequence# from v$managed_standby;
--MRP0 wait_for_log <nr>
#3.STB(new PRM)
archive log list;
--convert PRM to STB
select switchover_status form v$database;
--see TO STANDBY
--convert
alter database commit to switchover to physical standby with session shutdown;
--mount
startup mount;
#4.PRM(old)
select switchover_status from v$database;
--see TO PRIMAEY
alter database commit ot switchover to primary with session shutdown;
--open
alter database open;
--start MRP
alter database recover managed standby database disconnect;
--check transfer
select process, status, sequence# from v$managed_standby;
#5.STB
archive log list;
alter system switch logfile;
###############################################################################
#CONVERT PHYSICAL STB to SNAPSHOT STB
###############################################################################
#1.STB
select name, open_mode, database_role from v$database;
--see mounted, PHYSICAL_STANDBY
--stop MPR process
alter database revover managed standby database cancel;
alter database convert to snapshot standby;
alter database open;
--test snapshot STB
create table ss_test(sno number);
insert into ss_test values(10);
select name, open_mode, database_role from v$database;
--see database_role=SNAPSHOT STANDBY
select name, guarantee_flashback_database from v$restore_point;
###############################################################################
#CONVERT SNAPSHOT STB to PHYSICAL STB
###############################################################################
#1.STB
shut immediate;
exit;
sqlplus / as sysdba;
startup mount;
alter database convert to physical standby;
shut immediate;
exit;
sqlplus / as sysdba;
startup mount;
--start MRP
alter database recover managed standby database disconnect;
select process, status, sequence# from v$managed_standby
###############################################################################
#CONVERT PHYSICAL STB to LOGICAL STB
###############################################################################
#1.STB
select name, open_mode from v$database;
--mounted
--MRP down
alter database recover managed standby database cancel;
alter database open;
--MRP up
alter database recover managed standby database disconnect;
select name, open_mode from v$database;
--READ ONLY WITH APPLY
--only select queries are possible
###############################################################################
#CONVERT ACTIVE DATAGUARD to PHYSICAL STB
###############################################################################
#1.STB
--MRP down
alter database recover managed standby database cancel;
shut immediate;
exit
sqlplus / as sysdba;
startup mount;
--MRP up
alter database recover managed standby database disconnect;
##############################################################################
