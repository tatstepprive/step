#plsql block structure
DECLARE --optional
--variables, cursors, user defined exceptions
BEGIN   --mandatory
--sql statements (select, insert, delete, update etc)
--plsql statements (if, for while loop, etc)
EXCEPTION --optional
--actions to perform when errors occurs
END;      --mandatory
#=================================================
#Block types
#anonymous block type (unnamed, compiled every time, not stored in db, can not be invoked, dont return value, no parameters)
[DECLARE]
BEGIN
--statements
[EXCEPTION]
END;
#procedure block type (subprogram) = perform action (named, compiled once, stored in db, invoked, parameters)
PROCEDURE name IS 
BEGIN
--statements
[EXCEPTION]
END;
#function block type (subprobram) = return value (named, compiled once, stored in db, invoked, return value, parameters)
FUNCTION name 
RETURN datatype
IS
BEGIN
--statements
RETURN value;
[EXCEPTION]
END;
#======================================================
Package=container of related procedures and functions
#=====================================================
#declare without variables, cursors is OK, no errors
declare
begin
dbms_output.put_line('Hi PLSQL world!');
end;
#=====================================================
#initialize variable with value via assing operator := or DEFAULT keyword
#a:=5 (assign (new) value to variable named a in declare or between begin and end)
declare
a number DEFAULT 10;
b number:=20;
begin
a:=369;
b:=963;
dbms_output.put_line('Hi PLSQL world!');
dbms_output.put_line(a);
dbms_output.put_line(b);
dbms_output.put_line('a value is '||b);
dbms_output.put_line('b='||b);
end;
#=====================================================
#variable usage (between DECLARE and BEGIN)
#syntax: identifier [CONSTANT] datatype [NOT NULL] [:= | DEFAULT expr];
#tip: avoid using column names as identifier
DECLARE
v_my_date DATE;
v_deptno NUMBER(2) not null :=10;
v_location VARCHAR2(13) :='Brussels';
c_comm CONSTANT NUMBER :=1500;
v_date DATE :=sysdate;
v_no NUMBER :=10*2;
v_pi constant number:=3.14;
v_student_id number(6);
BEGIN
dbms_output.put_line('Hi');
select student_id into v_student_id 
from students
where fname='John';
END;
#===================================================
# quotes or apostrophe in string ('' is escape ') or new char for qoute q'<new_quote_char><string_with_quote><new_quote_char>'
DECLARE
v_first varchar2(50):='Father''s day';
v_second varchar2(50):=q'!Mother's day!';
v_third varchar2(50):=q'[Kid's day]';
BEGIN
dbms_output.put_line('Hi my quoted strings');
dbms_output.put_line(v_first);
dbms_output.put_line(v_second);
dbms_output.put_line(v_third);
END;
#==================================================
#Varible types plsql (scalar, composite, reference, lob=large object); non plsql (bind variables=host variables)
Types:
 * scalar (single value; category: character, number, date, boolean)
   ** character (char, varchar2)
   ** number (number[(precision,scale)] p=1-38, s=-84-127; binary_integer, pls_integer, binary_float, binary_double)
   ** boolean (true, false, null)
   ** date (date y,m,d and include h,m,s; timestamp includes fraction of second; timestamp with time zone; timestamp with local time zone) default 'dd-mm-rr'
   ** lob (clob=caracter large object=book; blob=binary large object=photo; bfile=movie; nclob=international system caracter large object=book in japain)
 * composite (contains segments like date-boolean-varchar2-blob)
#==================================================
#Dates
declare
v_no number:=300;
v_date date;
v_timestamp timestamp;
v_project_period interval year to month;
begin
v_no:=125;
v_date:=sysdate;
v_timestamp:=current_timestamp;
v_project_period:='03-04';
dbms_output.put_line(v_no);
--print without hours
dbms_output.put_line(v_date);
--print with hours
dbms_output.put_line(to_char(v_date, 'dd-mm-yyyy hh24:mm:ss'));
dbms_output.put_line(v_timestamp);
dbms_output.put_line('bla '||v_project_period);
end;
#==================================================
#Using %TYPE f: declare var with type according to column definition or type according to other var; Take the data type over
emp_lname employees.last_name%TYPE;

balance number(7,2);
max_balance balance%TYPE:=10000;

#Expl
declare
v_fname employees.first_name%type;
v_lname employees.last_name%type;
begin
select first_name, last_name
into v_fname, v_lname
from employees
where employee_id =100;
dbms_output.put_line(v_fname||' '||v_lname);
end;
#===============================================
# Bind variables (=like public variables, can be used outside plsql block=host variables=declared with variable/var <varname>=referenced by :<var_name>=related to session not to block)
variable v_sal number;
begin
select salary into :v_sal
from employees 
where employee_id =100;
end;
/
print v_sal;
#expl 2
variable v_sal number;
set autoprint on;
begin
select salary into :v_sal
from employees
where employee_id =100;
end;
#Tip: if number - no size, if varchar2 - give size when using variable
#==============================================
#Nested blocks
declare
...
begin
... 
  declare
  ...
  begin
  ...
  end;
end;
#==============================================
#Cursor attributes:
SQL%notfound;
SQL%found;
SQL%rowcount;
#expl 1
declare
v_rows_updated number:=0;
begin
update employees 
set salary =salary +100
where department_id=20;
v_rows_updated:=sql%rowcount;
DBMS_OUTPUT.PUT_LINE('The records are updated: '|| v_rows_updated);
end;

#expl 2
declare
v_rows_exist boolean:=true;
begin
update employees 
set salary=salary +100
where department_id=9999;
v_rows_exist:=sql%found;
if  v_rows_exist=false then
DBMS_OUTPUT.PUT_LINE('No records');
else
DBMS_OUTPUT.PUT_LINE('Found records '||sql%rowcount);
end if;
end;
#=============================================
#Control flow execution
IF ... THEN ... END IF;
IF ... THEN ... ELSE ... END IF;
IF ... THEN ... ELSIF ... THEN ... ELSE ... END IF;

CASE
WHEN ... THEN
WHEN ... THEN
...
ELSE
END CASE;


#expl 1
Declare
v_num number:=&v;
Begin
 if v_num >=10 then
 dbms_output.put_line('Input is less or equal then 10 input='||v_num);
 end if;
end;
#=============================================
#Handle null value nvl(x,0) = if x is null use zero as default
#Handle null if x is null and y is null then (because if they are not defined both null and null but they are still not equal)
# operator with null value is always equal null
#=============================================
LOOPS: LOOP, FOR, WHILE

LOOP 
statement1;
...
EXIT [ WHEN cond];
END LOOP;

#expl 1
Declare
v_counter number:=0;
Begin
 loop
 v_counter:=v_counter+1;
 dbms_output.put_line('Hi '||v_counter);
 exit when v_counter=3;
 end loop;
end;


WHILE cond 
LOOP
statement1;
...
END LOOP;


FOR i in 1..3
LOOP
statement1;
...
END LOOP;

Declare
v_counter number:=0;
v_stars varchar2(50):='*';
Begin
 loop
 v_counter:=v_counter+1;
-- dbms_output.put_line('Hi '||v_counter);
  dbms_output.put_line(v_stars);
   v_stars:=v_stars||'*';
 exit when v_counter=5;
 end loop;
end;
--output:
*
**
***
****
*****
#============================================
#Cursors (implicit by oracle, explicit by devs)
Cursor is valid select statement
Flow: Declare->Open->Fetch(load in var)->Empty?->Close

Declare
  cursor <cursor_name> is
  select ... from table 
  where ...
  order by ...;
  v_name1 varchar2(100)
  v_name2 varchar2(100)
Begin
open <cursor_name>;
loop 
   fetch <cursor_name> into v_name1, v_name2;
   exit when <cursor_name>%notfound;
   dbms_output.put_line(v_name1||' '||v_name2);
  -- update, insert etc statements
end loop;
close <cursor_name>;
commit; --after closing cursor
end;

#Tip: in for loop is no need to open and close cursor, for loop will handle it
Declare
  cursor <cursor_name> is
  select ... from table
  where ...
  order by ...;
  v_name1 varchar2(100)
  v_name2 varchar2(100)
Begin
for i in <cursor_name> 
loop
   dbms_output.put_line(i.value1||' '||i.value2);
  -- update, insert etc statements
end loop;
commit; --after closing cursor
end;

#Tip: no cursor declaration (implicit cursor)
Declare
Begin
for i in (select ... from table where ... order by ...)
loop
   dbms_output.put_line(i.value1||' '||i.value2);
  -- update, insert etc statements
end loop;
commit; --after closing cursor
end;

Attributes:
%ISOPEN true if cursor is open
%NOTFOUND true if recent fetch has no row
%FOUND true if recent fetch has row
%ROWCOUNT number of rows
#===============================================
#Catch exception
Declare
Begin
--statements
Exception
  when ex1 [OR ex2 ...] then
--  statements;
  when others then
--  statements;
End;

#Predefined exceptions:
NO_DATA_FOUND (ORA-01403)
TOO_MANY_ROWS (ORA-01422)
INVALID_CURSOR (ORA-01001)
ZERO_DIVIDE
DUP_VAL_ON_INDEX (ORA-00001)
etc

#Own exception
Declare
e_insert exception;
pragma exception_init (e_insert, -101400);
Begin
--statements
Exception
when e_insert then 
dbms_output.put_line('insert failed');
dbms_output.put_line(sqlcode);
dbms_output.put_line(sqlterm);
when others then null;
End;

# Raise error (wiht true last parameter you will display your defined error and oracle error too.
# default is false and only your error will be displayed
raise_application_error(xxx, 'text', true);

#Meaning
sqlcode=sql code for error like ORA-xxx
sqlerrm=sql error message
sqlterm=
#==============================================
#Triggers (on table, view, schema, database)
Trigger event types:
* DML statement (insert, update, delete)
* DDL statement (create, alter, truncate, drop)
* DCL statement (grant, revoke)
* DB operation (logon, logoff, startup, shutdown, servererror)
