--Move data using export import
===========================================
--Full
expdp system@PRODB FULL=Y DUMPFILE=proddb.dmp
#tablespaces must be created before the import
impdp system@PDBC FULL=Y DUMPFILE=proddb.dmp
============================================
--Existance and privileges on directories
select * from dba_directories;
--Tip: directories are owned by SYS, user can not drop them but can create if granted 'create any directory' priv
grant creaty any directory to u1;
--create directory
create directory my_dir as '/home/oracle/dumps';
--as SYS
drop directory my_dir;
--grants
grant read on directory my_dir to public;
grant write on directory my_dir to u1;
--export exp1 full
expdb system/pass@sid1 full=y parallel=2 dumpfile=datadir1:full1_%U.dmp,datadir2:full2_%U.dmp filesize=2g compression=all
--import exp1 full
impdp system/pass@sid2 full=y directory=my_dir parallel=2 dumpfile=full1_%U.dmp,full2_%U.dmp
--export exp2 some schemas
expdp system/pass@sid1 schemas=hr,oe directory=my_dir dumpfile=hr_oe.dmp 
--import exp2 some schemas
impdb system/pass@sid2 directory=my_dir dumpfile=hr_oe.dmp schema=hr remap_schema=hr:dev
--exp exp3 metadata 
EXPFILE=`date +"%Y%m%d"`sid1_meta_multi_exp.dmp
TMP_LOGFILE=/dumps/sid1/`date +"%Y%m%d"`sid1_meta_multi_exp_tmp.log
DUMP_LOGFILE=`date +"%Y%m%d"`sid1_meta_multi_exp.log
expdp SYSTEM/pass@Bsid1 DIRECTORY=my_dir DUMPFILE=$EXPFILE LOGFILE=$DUMP_LOGFILE LOGTIME=LOGFILE METRICS=YES TABLES=u1.big_table_logs CONTENT=METADATA_ONLY FLASHBACK_TIME=SYSTIMESTAMP 1>$TMP_LOGFILE 
2>&1
--imp exp3 metadata
cat /tmp/parfile-imp-meta
--output
EXCLUDE=GRANT
DIRECTORY=my_dir
DUMPFILE=20220608sid1_meta_multi_exp.dmp
LOGFILE=import_u1_u2_META_EXP20220608.log
LOGTIME=LOGFILE
REMAP_SCHEMA=u1:u2
TABLES=u1.big_table_logs
CONTENT=METADATA_ONLY
--end-output
impdp u2/pass@sid2 PARFILE=/tmp/parfile-imp-meta
--exp exp4 transportable tbs
--host1
execute dbms_tts.transport_set_check('TS1');
alter tablespace TS1 read only;
expdp system/pass@sid1 transport_tablespaces=ts1 dumpfile=ts1.dmp directory=my_dir
scp ts1.dmp ts1.dbf oracle@host2:/u02/oradata/ts1.dbf
impdp system/pass@sid2 dumpfile=ts1.dmp directory=my_dir transport_datafiles=/u01/oradata/ts1.dbf
alter tablespace ts1 read write; 

--Attention: by adding a new tbs or datafile, the exp/imp job should be adapted
--Mesure time to copy big files on the same server
--Mesure tiem using rsync 
--Test content with rsync 
--Dont use dataguard environment for import because many dataguard log files generated during import when db is open in snapshot
--Todo separate tbs per schema, remap tbs

----------------------------------
SELECT * FROM dba_datapump_jobs;
select * from owner_name.job_name;
----------------------------------
--stop imp/exp job
SET serveroutput on
SET lines 100
DECLARE
job1 NUMBER;
BEGIN
job1 := DBMS_DATAPUMP.ATTACH('SYS_EXPORT_SCHEMA_01','MYOWNER');
DBMS_DATAPUMP.STOP_JOB (job1);
END;
/
---------------------------------
--export as superuser
expdp \"sys/xxx@ORCLP as sysdba\" FULL=Y DIRECTORY=MY_DIR LOGFILE=${LOGFILE} LOGTIME=LOGFILE DUMPFILE=${EXPFILE} COMPRESSION=ALL FLASHBACK_TIME=SYSTIMESTAMP
---------------------------------
--move index online
ALTER INDEX MY_OWNER.MY_INDX REBUILD TABLESPACE MY_TBS_INDEX STORAGE ( INITIAL     64K  NEXT        1M) ONLINE;
--move many indexes on condition
SELECT 'ALTER INDEX '||OWNER||'.'||INDEX_NAME||' REBUILD TABLESPACE MY_TBS_INDEX STORAGE ( INITIAL 64K NEXT  1M) ONLINE ;' from dba_indexes where owner like 'MY_OWNER%' and 
index_type='NORMAL' and initial_extent=65536 and next_extent=1048576;
--move index partition online
alter index MY_OWNER.MY_INDEX rebuild partition MY_PARTITION online tablespace MY_TBS_1M STORAGE( INITIAL 1M NEXT 1M) ;
--------------------------------
--move table online (only supported in oracle 12.2, we use 12.1)
--In addition to moving the table, the online move automatically maintains the indexes
ALTER TABLE t1 MOVE ONLINE TABLESPACE users;
--move many tables
SELECT 'ALTER TABLE '||OWNER||'.'||TABLE_NAME||' MOVE ONLINE TABLESPACE MY_TBS_DATA;' from dba_tables where owner like 'MY_OWNER%' and tablespace_name like 'MY_OLD_TBS%';
--restrictions associated with online moves 
--It can't be used on a partitioned index-organized table or index-organized tables that have a column defined as a LOB, VARRAY, Oracle-supplied type, or user-defined object type.
--------------------------------
--move lob
alter table MY_OWNER.MY_TABLE move lob (my_lob_column) store as ( tablespace MY_TBS_DATA) ;
--check table_name and lob column in dba_lobs
--move lob, reduce extents for big tables! (move to tbs with EXTENT MANAGEMENT LOCAL UNIFORM SIZE 100M). 
--dont move to tbs with EXTENT MANAGEMENT LOCAL AUTOALLOCATE cat give more segments that before move even with other 
storage clausule 
ALTER TABLE MY_OWNDER.MY_TABLE MOVE LOB(MY_LOB_COLUMN) STORE AS (TABLESPACE MY_TBS_100M STORAGE( INITIAL 100M NEXT 100M))  parallel 96;
-------------------------------
--move partition
alter table MY_OWNER.MY_TABLE move partition MY_PARTITION tablespace MY_TBS;
------------------------------
--move data using scripts
--move tables with lob
BEGIN
        FOR x IN
        (
                SELECT 'ALTER TABLE '||OWNER||'.'||TABLE_NAME||' MOVE LOB ('||COLUMN_NAME||') store as ( TABLESPACE MY_TBS_1M ) ' comm
                FROM    dba_lobs
                WHERE   owner in  ('MY_USER1', 'MY_USER2', 'MY_USER3', 'MY_USER3', 'MY_USER4', 'MY_USER5')
                and tablespace_name='MY_TBS'
        )
        LOOP
                dbms_output.put_line(x.comm);
                EXECUTE immediate x.comm;
        END LOOP;
END;
/

BEGIN
        FOR x IN
        (
                SELECT 'ALTER INDEX '||OWNER||'.'||INDEX_NAME||' REBUILD ONLINE PARALLEL' comm
                FROM    dba_indexes
                WHERE   status = 'UNUSABLE'
                UNION ALL
                SELECT 'ALTER INDEX '||index_owner||'.'||index_name||' REBUILD PARTITION '||partition_name||' ONLINE PARALLEL'
                FROM    dba_ind_PARTITIONS
                WHERE   status = 'UNUSABLE'
                UNION ALL
                SELECT 'ALTER INDEX '||index_owner||'.'||index_name||' REBUILD SUBPARTITION '||subpartition_name||' ONLINE PARALLEL'
                FROM    dba_ind_SUBPARTITIONS
                WHERE   status = 'UNUSABLE'
        )
        LOOP
                dbms_output.put_line(x.comm);
                EXECUTE immediate x.comm;
        END LOOP;
END;
/

-----------------------------------------------------------
--move tables
BEGIN
        FOR x IN
        (
                SELECT 'ALTER TABLE '||OWNER||'.'||TABLE_NAME||' MOVE TABLESPACE MY_TBS_1M ' comm
                FROM    dba_tables
                WHERE   owner in  ('MY_USER1', 'MY_USER2', 'MY_USER3', 'MY_USER4', 'MY_USER5', 'MY_USER6')
                and tablespace_name='MY_TBS'
                and table_name like 'A%'
        )
        LOOP
                dbms_output.put_line(x.comm);
                EXECUTE immediate x.comm;
        END LOOP;
END;
/



-- rebuild all unused indexes
BEGIN
        FOR x IN
        (
                SELECT 'ALTER INDEX '||OWNER||'.'||INDEX_NAME||' REBUILD ' comm
                FROM    dba_indexes
                WHERE   status = 'UNUSABLE'
                UNION ALL
                SELECT 'ALTER INDEX '||index_owner||'.'||index_name||' REBUILD PARTITION '||partition_name||' '
                FROM    dba_ind_PARTITIONS
                WHERE   status = 'UNUSABLE'
                UNION ALL
                SELECT 'ALTER INDEX '||index_owner||'.'||index_name||' REBUILD SUBPARTITION '||subpartition_name||' '
                FROM    dba_ind_SUBPARTITIONS
                WHERE   status = 'UNUSABLE'
        )
        LOOP
                dbms_output.put_line(x.comm);
                EXECUTE immediate x.comm;
        END LOOP;
END;
/
------------------------------------------------------
--Move lob subpartition 
--check structure
SELECT TABLE_OWNER,TABLE_NAME,COLUMN_NAME,LOB_NAME,SUBPARTITION_NAME,LOB_PARTITION_NAME,LOB_SUBPARTITION_NAME, SECUREFILE,TABLESPACE_NAME
FROM DBA_LOB_SUBPARTITIONS 
WHERE TABLE_OWNER = 'MY_USER'
order by SUBPARTITION_NAME;
--output
--MY_USER	T1	CONTENT	SYS_LOB0000139407C00006$$	T1_2012	SYS_LOB_P533	SYS_LOB_SUBP534	YES	MY_TBS_1G
--MY_USER	T1	CONTENT	SYS_LOB0000139407C00006$$	T2_2013	SYS_LOB_P533	SYS_LOB_SUBP607	YES	MY_OTHER_TBS_1G

--Move lob subpartition
alter table MY_USER.T1 
move subpartition T1_2012
lob (CONTENT) store as securefile (tablespace MY_OTHER_TBS_1G STORAGE( INITIAL 1G NEXT 1G)) parallel 96;
--TODO rebuild indexes after move 
------------------------------------------------------
--Move lob partition, without table partition
ALTER TABLE MY_U1.MY_T1
 MOVE 
  PARTITION MY_PART1
    NO INMEMORY
    TABLESPACE MY_OLD_TBS1
    LOB (CONTENT) STORE AS SECUREFILE (TABLESPACE MY_NEW_TBS_10M) parallel 96;
-------------------------------------------------------
--Move tablespaces (in 12.1)
ALTER DATABASE MOVE DATAFILE '/ora01/MYDB/datafile/o1_mf_system_l35q9kmz_.dbf' TO '/ora01/MYDB/system/system.dbf';
ALTER DATABASE MOVE DATAFILE '/ora01/MYDB/MYDB/datafile/o1_mf_sysaux_l35q9n8w_.dbf'  TO '/ora01/MYDB/system/sysaux.dbf';
ALTER DATABASE MOVE DATAFILE '/ora01/MYDB/MYDB/datafile/o1_mf_undotbs1_l35q9p54_.dbf' TO '/ora01/MYDB/undo/undotbs1.dbf';
--Move temp tablespace (in 12.1) multiple steps
alter tablespace temp add tempfile '/ora01/MYDB/undo/temp01.dbf' size 10m autoextend on next 10m maxsize unlimited;
alter database tempfile '/ora01/MYDB/MYDB/datafile/o1_mf_temp_l35q9q9g_.tmp' offline;
alter database tempfile '/ora01/MYDB/MYDB/datafile/o1_mf_temp_l35q9q9g_.tmp' drop including datafiles;

--if ORA-25152: TEMPFILE cannot be dropped at this time
--then disconnect and connect
--also clouse other connections using the old (to be moved) temp tbs
SELECT b.tablespace,b.segfile#,b.segblk#,b.blocks,a.sid,a.serial#,
 a.username,a.osuser, a.status
 FROM v$session a,v$sort_usage b
 WHERE a.saddr = b.session_addr;

alter system kill session 'SID_NUMBER, SERIAL#' immediate;
--------------------------------------------------------
