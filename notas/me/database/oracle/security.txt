Data security:
1 system security
2 data security

System privileges: perform an action within db (create/modify/drop user, create/modify/drop table, view, sequence etc) =250 system privileges (see system_privilege_map table)
Object privileges: manipulate the content of the db objects
Schema: collection of objects such as tables, views, sequences. Owned by db user and has the same name as that user, so schema~user in oracle db.

Users and schemas are db users, 
but when the user has/owns objects then we call it schema
=======================================
System privileges: 
 * create/drop user, role
 * create session
 * create/drop table, view, sequence, procedure
 * backup table etc

All system privileges: 
select * from system_privilege_map;
=======================================
#Username restrictions
* less then 30 chars
* start with letter
* contains only letters, digits, $ and _
* not reserved word (like table, user, alter, select etc)
* automatically converted and saved in uppercase
* skip rule contains only, reserved word, converted to uppercase when in ""
* username can not be changed after creation

# Create new user
create user <user> identified by <pass>;

create user demo identified by demo123;
select * from all_users;

# change user pass as super user (sys) 
alter user demo identified by demo456;

#change own pass as user demo (not super user): use replace !
alter user demo identified by demo123 replace demo456; --or alter user <you> idetified by <new_pass>;

#check user
select * from user_users;
select * from all_users;
select * from dba_users;

# Give/grant system privileges after user creation
grant <privilege>[, <privilege>... ]
to <user>[, <user>/<role>, PUBLIC...];

grant create session, create table, create sequence, create view
to demo;

#Remove/revoke privileges
revoke <privilege>|ALL
on <object>
from {<user>|<role>|PUBLIC}
[cascade constraints];
==================================
# Role
Role is collection of privileges and/or roles.
User can have access to several roles.
Several users can be assigned the same role.
Role can be created with pass (identified by <pass>) but it not often used.
#check all roles
SELECT * FROM DBA_ROLES;
#create role
create role manager;

#grant privileges to a role
grant create table, create view
to manager;

#assign role to user
grant manager to demo;
=====================================
Object privileges
* Object privileges vary from object to object
   table (alter, delete, index, select, insert, update, references (=other users can create fk on your table), all) Attention: create table is system privilege
   view  (delete, select, insert, update) Attention: create view is system privilege
   sequence (alter, select) Attention: create sequence is system privilege
   procedure,function (execute)
   cache group (flush,load,unload,refresh)
* an owner has all privileges on the object;
* an owner can give privileges on his owned object

grant <privilege> [(columns)]
on <object>
to {<user>|<role>|PUBLIC}
[with_grant_option];

grantee=user, TO who the privilege is given 
grantor=user, who gives privilege
======================================
Data dictionary view=Description
dba_role_privs=role privileges
dba_sys_privs=system privileges granted to users and roles
dba_tab_privs=which user direct grant access to a table
#roles related
role_sys_privs=system privileges granted to roles (role, privilege etc) f: which privileges has a role
role_tab_privs=table privileges granted to roles (role, owner, table_name, privilege etc) f: role and table related privilege
user_role_privs=roles accessible by the user (username, granted_role etc) f: which roles has user
#what i can do in my own world because of direct grants to me (without roles counting)
user_sys_privs=system privileges granted to current user (username, privilege etc) f: which privileges has user assign directly (without using roles)
#who can look in my world
user_tab_privs=object privileges granted to the user's objects (..made+...recd) f: who from outside can look in his schema objects
user_tab_privs_made=object privileges granted to the user's objects f: who from outside can look in his schema objects
user_tab_privs_recd=object privileges granted to the user f:can given user look in other schemas, the tables and owners you will find here.
user_col_privs_made=object privileges granted on the columns f: same as user_tab_privs_recd (can look outside his schema), but with columns limitation
                    of the user's objects
user_col_privs_recd=object privileges granted to the user on columns
#what i can do in my own world because of roles AND direct grants to me
session_privs=current system privileges for the user given directly AND via roles (see user_sys_privs for only directly given privileges)
#roles that i have
session_roles= roles that are currently enabled to the current user

Tip:
select * from user_tab_privs_made;
row with grantee=PUBLIC table_name=<this_schema_name> grantor=<this_schema> privilege=inherit_privileges type=user
means that this schema/user CAN GIVE access on any his own object to public, see other rows what is given to PUBLIC
Tip: users with sysdba and syoper privileges: select * from v$pwfile_users;
========================
#Common users
Common user = user in root container with prefix c##<username>
Tip: value for common_user_prefix is only visible when    alter session set container=CDB$ROOT;
show parameter common_user_prefix;
create user <user_name> identified by x; --gives error because no prefix c## in name
create user c##<user_name> identified by x container=ALL;
grant create session to c##<user_name> container=ALL;
create role c##<role_name> container=ALL;
grant create session to c##<role_name> container=ALL;
grant c##<role_name> to c##<user_name> container=ALL;
Local user vs common user: local user is only created and visible in pdb, common user is created in root container and can be used in all pdbs
=====================
#Oracle supplied administrator accounts
SYS (all admin tasks)
SYSTEM (admin tasks, except backup and recovery, database upgrade)

Other admin accounts:
SYSBACKUP (backup RMAN and recovery)
SYSDG (data guard operations)
SYSRAC (real application cluster RAC tasks)
SYSMAN (enterprise manager tasks)
SYSKM (transparent data encryption TDE wallet operations)
Tip: show sys users: select * from dba_users where username like 'SYS%' order by username;

# 7 Special system privileges for admin
SYSDBA
* startup and shutdown
* alter database (open, mount, backup, change character set)
* create database
* create spfile
* alter database archivelog
* alter database recover
* view user data

SYSOPER
* all sysdba except view user data and complete recovery only (no until time etc)

SYSBACKUP 
* backup and recover operation using RMAN or sqlplus

SYSDG 
* dataguard operations using Data Guard Broker or dgmgrl

SYSKM
* transparent data encryption TDE operations

SYSRAC
* oracle real application cluster RAC operations

SYSASM
* storage administration

# Oracle supplied roles
Tip: 89 rows: select role from dba_roles ;

DBA=includes system privileges and other roles, connect to cdb/pdb, 
only for admins. (sys and system have this role by default)
Tip: 235 rows: select * from dba_sys_privs where grantee='DBA';

CONNECT=create session, set container;
Tip: select * from dba_sys_privs where grantee='CONNECT';

RESOURCE=create table, create sequence, create triger, create type, 
create procedure, create indextype, create operator, create cluster
Tip: select * from dba_sys_privs where grantee='RESOURCE';

SCHEDULER_ADMIN=create any job, create external job, create job, 
execute any class, execute any program, manage scheduler
Tip: select * from dba_sys_privs where grantee='SCHEDULER_ADMIN';

SELECT_CATALOG_ROLE=select privileges on data dictionary objects
Tip: not in dba_sys_privs, but in dba_roles;

Tip: all roles 89 rows: select role from dba_roles ;
Tip: roles without sys privs like SELECT_CATALOG_ROLE
60 rows: select role from dba_roles  where role not in (select grantee from dba_sys_privs group by grantee) order by role;
Tip: create local admin for each pdb with role dba to have local admin for pdb.
Tip: to see who has privilege to create table => select * from dba_sys_privs where privilege='CREATE TABLE';
#sysdba vs dba
Tip: login as sys and see diff in 18 rows:
select * from session_privs 
where privilege  not in (select privilege from role_sys_privs where role='DBA');
=======================================
#user profile 
# User profile manages restrictions for
* password parameters
* resource limits

user can have only one profile assigned.
There is a default profile assinged silently

# password parameters
* account locking 
   * FAILED_LOGIN_ATTEMPTS = number of failed logins before lock (default 10)
   * PASSWORD_LOCK_TIME = number of days for which the account is locked after failed login attemps (default 1)
   * INACTIVE_ACCOUNT_TIME = number of days the account can be inactive before it is locked (default UNLIMITED)
* pass aging and expiration
   * PASSWORD_LIFE_TIME = lifetime in days, after which the pass exprires (number of days you can use pass) (default 180, its half year)
   * PASSWORD_GRACE_TIME= a grace periond in days, for changing the pass after good login after the pass has expired (default 7 )
* pass history
   * PASSWORD_REUSE_TIME = days that user cannot reuse the pass (default UNLIMITED)
   * PASSWORD_REUSE_MAX = number of pass changes before the current pass can be reused (default UNLIMITED)
* pass complexity
   * PASSWORD_VERIFY_FUNCTION = checks pass complexity (default NULL)

Model verification function: $ORACLE_HOME/rdbms/admin/utlpwdmg.sql catpvf.sql
See sys owned verification functions: ora12c_verify_function, ora12c_strong_verify_function, verify_function_11g
Tip: pass complexity check is not enforced for sys user. Sys user can set any pass.

Show user profile:
select profile from dba_user where username=<user>;

Show values for profile
select * from dba_profiles;
#resource limits
* Cpu resources
CPU_PER_SESSION
CPU_PER_CALL = 3000 (single call can not consume more than 30 sec cpu time)
* Network ane memory resources
connect time
idle time
concurrent sessions
private sca
* Disk IO resources

Tip: set RESOURCE_LIMIT='TRUE', default is 'FALSE' and profile resource limits are ignored
See the current setup: show parameter resource_limit;
====================
#show error explaination
! oerr ora 2377
=================== 
#Forgotten sys pass
#solution1
sqlplus /nolog
connect / as sysdba
Once connected, you can change the SYS password to something you know:
ALTER USER sys IDENTIFIED BY new_password;
#solution2
connect as system user and
ALTER USER SYS IDENTFIED BY SysPassWord ; --case sensitive
====================
#Change own password 
ALTER USER <you> IDENTFIED BY <new_pass> ; --case sensitive
===================
