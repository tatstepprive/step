PostgreSQL=database, default port 5432
PgAdmin=gui to connect (not running on ie11, use chrome or firefox)
urls:
https://www.postgresql.org/
https://www.pgadmin.org/
https://www.postgresql.org/docs/12/index.html
https://www.postgresql.org/files/documentation/pdf/12/postgresql-12-A4.pdf
#Default log location
/var/lib/pgsql/12/data/log
#Default config location
/var/lib/pgsql/<version>/data/postgresql.conf
#=========================
#Install only PostgreSQL-Client client to use psql commands (like to use in jenkins to connect to remote database)
sudo bash
apt install -y curl ca-certificates gnupg
curl https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/postgresql.list' 
apt update -y
apt install -y postgresql-client-12
psql --version
#=========================
sql:
-select
-distinct
-count
-where
-order by
-limit
-between
-in
-like
-ilike
-group by
=================================
# show all users roles
SELECT usename AS role_name,
  CASE 
     WHEN usesuper AND usecreatedb THEN 
	   CAST('superuser, create database' AS pg_catalog.text)
     WHEN usesuper THEN 
	    CAST('superuser' AS pg_catalog.text)
     WHEN usecreatedb THEN 
	    CAST('create database' AS pg_catalog.text)
     ELSE 
	    CAST('' AS pg_catalog.text)
  END role_attributes
FROM pg_catalog.pg_user
ORDER BY role_name desc;
=================================
Schema = namespace and contains db objects as tables, views, indexes, datatypes, functions, stored procedures and operators
to access object = select <schema_name>.<object_name>
Database 1---------n Schemas ---------- n Tables
Schema ------1 Database
Default: there is 2 db available postgres and template1
Public is default schema in every new database
Schema path= LIST of schemas to look for a table
psql : show search_path

User=ROLE_NAME
User (role) can access own or granted usage schema
GRANT USAGE ON SCHEMA <schema_name> to <role_name>
Default: user can use and create object in public schema

ROLE=USER
GROUP ROLE= role can contain other roles
pg_<role_name> = starting with pg are the roles reserved by system
select rolename from pg_roles; --show all roles
psql: \du   --show roles except pg_ roles

psql line and user:
<dbname>=> //usual user
<dbname>=# //super user

-- is comment in sql
sql is ignoring case expept between ""

pgsql vs psql?
pgsql 
psql= command line tool to connect db, terminal program
pgAdmin= client program with graphic interface

==========================================
env variables:
PGHOST server host OR flag -h 
PGPORT server port OR flag -p
PGUSER user or flag -U
PGPASSWORD password to connect
PGDATA database storage area on disk or flag -D
default is /usr/local/pgsql/data or /var/lib/pgsql/data
==========================================
select version()
postgres --version
psql --version
/var/lib/pgsql/<version>/data/postgresql.conf
==========================================
Database: separate db for each project or user
createdb <db_name> 
db_name=starts with a letter and contain 63 bytes (default db_name=user_name)
/usr/local/pgsql/bin/createdb
dropdb <db_name>
psql <db_name>
psql //and nothing as db_name where username(role)=db_name
Par default: username=dbname=1 schema with name public
On project you can use too:
1 user <app-name>user_<env=dev,acc,prd> exp: blauser_dev
1 db <app-name>-<env=dev,acc,prd> exp: bla-dev
A lot of schema <other-user-name>-service, public
===========================
psql \du = show users (roles)
psql \h  = help
psql \q  = quit
psql \?  = help
psql \d  = show tables
psqi \i  = reads file , connect as psql -s mydb and then \i myfile.sql
psql \dx = show extentions on current connected db
psql \c dbname = connect db or switch current connected db to other db
===========================
SQL
create table <table-name> (...); 
drop table <table-name>;
insert into table <table-name> (...) values (...); 
insert more data faster using COPY command on backend (server side):
COPY <table_name> from /path/to/file.txt
Transaction=all or notning operation
BEGIN;
sql code
COMMIT;
===========================
https://www.postgresql.org/docs/12/ddl-priv.html#PRIVILEGE-ABBREVS-TABLE

SELECT		r (“read”)	LARGE OBJECT, SEQUENCE, TABLE (and table-like objects), table column
INSERT		a (“append”)	TABLE, table column
UPDATE		w (“write”)	LARGE OBJECT, SEQUENCE, TABLE, table column
DELETE		d	TABLE
TRUNCATE	D	TABLE
REFERENCES	x	TABLE, table column
TRIGGER		t	TABLE
CREATE		C	DATABASE, SCHEMA, TABLESPACE
CONNECT		c	DATABASE
TEMPORARY	T	DATABASE
EXECUTE		X	FUNCTION, PROCEDURE
USAGE		U	DOMAIN, FOREIGN DATA WRAPPER, FOREIGN SERVER, LANGUAGE, SCHEMA, SEQUENCE, TYPE


Object Type	All Privileges	Default PUBLIC Privileges	psql Command
DATABASE		CTc	Tc				\l
DOMAIN			U	U				\dD+
FUNCTION or PROCEDURE	X	X				\df+
FOREIGN DATA WRAPPER	U	none				\dew+
FOREIGN SERVER		U	none				\des+
LANGUAGE		U	U				\dL+
LARGE OBJECT		rw	none	 
SCHEMA			UC	none				\dn+
SEQUENCE		rwU	none				\dp
TABLE (and table-like objects)	arwdDxt	none			\dp
Table column		arwx	none				\dp
TABLESPACE		C	none				\db+
TYPE			U	U				\dT+

=============================
#connection details (show current user, server etc)
\conninfo
select session_user, current_user;
#switch user
set role <other_user>;
=============================
#configure log name as postgresql-date.log instead of postgresql-weekday.log (exp: postgresql-Fri.log)
nano /var/lib/pgsql/12/data/postgresql.conf
#change to
#log_filename = 'postgresql-%a.log'     # log file name pattern,
log_filename = 'postgresql-%Y-%m-%d.log'        # log file name pattern,
#restart db 
 systemctl status postgresql-12
 systemctl stop postgresql-12
 systemctl restart postgresql-12
 systemctl status postgresql-12
#Default log location
/var/lib/pgsql/12/data/log

============================
#Password authenticaton:
pg_hba.conf controls the authentication method. 
* md5 (if you want to request a password, use md5 authentication)
* trust (If you want to allow login with no password to anyone, use trust) 
* peer (If you want to require the same username in the operating system as in PostgreSQL, use peer (UNIX, only for local connections) or sspi (Windows).
* sspi (same as above for windows)	

If there's a password set, but pg_hba.conf doesn't tell PostgreSQL to ask for it, the password is ignored.
If pg_hba.conf tells PostgreSQL to ask for a password but there's none set, then all login attempts will fail no matter what password is supplied.

------------------------------
Default config (not asking for pass for postgres user on host, asking for other users even if they are in postgres group):
cat pg_hba.conf
##a lot of comment
# TYPE  DATABASE        USER            ADDRESS                 METHOD

# "local" is for Unix domain socket connections only
local   all             all                                     peer
# IPv4 local connections:
host    all             all             127.0.0.1/32            ident
# IPv6 local connections:
host    all             all             ::1/128                 ident
# Allow replication connections from localhost, by a user with the
# replication privilege.
local   replication     all                                     peer
host    replication     all             127.0.0.1/32            ident
host    replication     all             ::1/128                 ident
host    all             all              0.0.0.0/0                       md5
host    all             all              ::/0                            md5
----------------------------
=============================
#Execute psql and see all parameters (default on version 12 are 314 rows)
select name, source, boot_val, sourcefile, pending_restart from pg_settings;
select name, source, boot_val, sourcefile, pending_restart from pg_settings where name='max_connections';
=============================
#Show all columns in pg_settings table in psql command tool
\d pg_settings;
============================
#Show all columns in pg_settings table via sql (vs oracle desc tablename)
SELECT 
   table_name, 
   column_name, 
   data_type 
FROM 
   information_schema.columns
WHERE 
   table_name = 'pg_settings';
===========================
#Object name conventions
common names - postgresql names
-------------------------------
table and index - relation
row -  tuple 
column - attribure
data block - page (on disk)
page - buffer ( in memory )
===========================
Page=smallest unit of data storage 
Table/index=array of pages of fixed size (default 8kb)
Page layout=page header, itemIdData -> ... tuple, special (...=free space) 
Bloated table=fragmented table
===========================
#Process and memory architecture
On disk
 * archive logs
 * wal files
 * data files
 * log files
Memory
 * shared buffer
 * wal buffer
 * clog buffer (f: commited transactions)
 * work memory
 * maintenance work memory
 * temp buffer
Processes
 * postmaster (f: main process, supervisor process to monitor, start, restart some processes if they die; listener to new connections from the client, authentification and authorization)
 * postgres (f: one per client connection)
 * stats collector (f: collect and report info about server activities and update info to optimizer directory pg_catalog)
 * checkpointer (default every 5 min or when max_wal_size (default 1G) exceeded, start writer to sync data to data files)
 * wal writer (f: write wal buffer to wal logs, write ahead log)
 * auto vacuum launcher (f: maintenance of fragmented tables)
 * logwriter/logger/logging collector (f: writes error messages and configured info to the log files)
 * pgwriter/writer (f: periodically (on checkpoint) writes dirty databuffer to data files)
 * archiver (disabled by default f: write to archive logs, copy wal log files to archive log files)
 ========================
#Init db (-D data dictionary location)
initdb -D /usr/local/pgsql/data 
pg_ctl -D /usr/local/pgsql/data initdb
========================
#shutdown types
 * smart (disallow new connections, waits existing sessions to terminate after all work done)
 * fast (default) (disallow new connections, aborts current transactions and exits gracefully)
 * immediate (quits/aborts, needs recovery on next startup)
=======================
#create integrity hash for compressed postgres dump
md5sum export_T2020122214u09m43s.dump
=======================
