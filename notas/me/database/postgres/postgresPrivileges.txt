=================================
# show all users roles
SELECT usename AS role_name,
  CASE 
     WHEN usesuper AND usecreatedb THEN 
	   CAST('superuser, create database' AS pg_catalog.text)
     WHEN usesuper THEN 
	    CAST('superuser' AS pg_catalog.text)
     WHEN usecreatedb THEN 
	    CAST('create database' AS pg_catalog.text)
     ELSE 
	    CAST('' AS pg_catalog.text)
  END role_attributes
FROM pg_catalog.pg_user
ORDER BY role_name desc;
=================================
Schema = namespace and contains db objects as tables, views, indexes, datatypes, functions, stored procedures and operators
to access object = select <schema_name>.<object_name>
Database 1---------n Schemas ---------- n Tables
Schema ------1 Database
Default: there is 2 db available postgres and template1
Public is default schema in every new database
Schema path= LIST of schemas to look for a table
psql : show search_path

User=ROLE_NAME
User (role) can access own or granted usage schema
GRANT USAGE ON SCHEMA <schema_name> to <role_name>
Default: user can use and create object in public schema

ROLE=USER
GROUP ROLE= role can contain other roles
pg_<role_name> = starting with pg are the roles reserved by system
select rolename from pg_roles; --show all roles
psql: \du   --show roles except pg_ roles

psql line and user:
<dbname>=> //usual user
<dbname>=# //super user

-- is comment in sql
sql is ignoring case expept between ""

==========================================
Database: separate db for each project or user
createdb <db_name> 
db_name=starts with a letter and contain 63 bytes (default db_name=user_name)
/usr/local/pgsql/bin/createdb
dropdb <db_name>
psql <db_name>
psql //and nothing as db_name where username(role)=db_name
Par default: username=dbname=1 schema with name public
On project you can use too:
1 user <app-name>user_<env=dev,acc,prd> exp: blauser_dev
1 db <app-name>-<env=dev,acc,prd> exp: bla-dev
A lot of schema <other-user-name>-service, public
===========================
psql \du = show users (roles)
psql \h  = help
psql \q  = quit
psql \?  = help
psql \d  = show tables
psqi \i  = reads file , connect as psql -s mydb and then \i myfile.sql
psql \dx = show extentions on current connected db
psql \c dbname = connect db or switch current connected db to other db
===========================
SQL
create table <table-name> (...); 
drop table <table-name>;
insert into table <table-name> (...) values (...); 
insert more data faster using COPY command on backend (server side):
COPY <table_name> from /path/to/file.txt
Transaction=all or notning operation
BEGIN;
sql code
COMMIT;
===========================
https://www.postgresql.org/docs/12/ddl-priv.html#PRIVILEGE-ABBREVS-TABLE

SELECT		r (“read”)	LARGE OBJECT, SEQUENCE, TABLE (and table-like objects), table column
INSERT		a (“append”)	TABLE, table column
UPDATE		w (“write”)	LARGE OBJECT, SEQUENCE, TABLE, table column
DELETE		d	TABLE
TRUNCATE	D	TABLE
REFERENCES	x	TABLE, table column
TRIGGER		t	TABLE
CREATE		C	DATABASE, SCHEMA, TABLESPACE
CONNECT		c	DATABASE
TEMPORARY	T	DATABASE
EXECUTE		X	FUNCTION, PROCEDURE
USAGE		U	DOMAIN, FOREIGN DATA WRAPPER, FOREIGN SERVER, LANGUAGE, SCHEMA, SEQUENCE, TYPE


Object Type	All Privileges	Default PUBLIC Privileges	psql Command
DATABASE		CTc	Tc				\l
DOMAIN			U	U				\dD+
FUNCTION or PROCEDURE	X	X				\df+
FOREIGN DATA WRAPPER	U	none				\dew+
FOREIGN SERVER		U	none				\des+
LANGUAGE		U	U				\dL+
LARGE OBJECT		rw	none	 
SCHEMA			UC	none				\dn+
SEQUENCE		rwU	none				\dp
TABLE (and table-like objects)	arwdDxt	none			\dp
Table column		arwx	none				\dp
TABLESPACE		C	none				\db+
TYPE			U	U				\dT+


====================================
CREATE DATABASE "my-db"
    WITH 
    OWNER = my_owner;
-------------------------------------
How to read: <user_who_recieved_privelege>=<which_privilege_as_sinle_letter>/<user_who_gave_privilege>
examples:
=Tc/my_owner (public revieved temporary and connect privileges from my_owner)
my_user2=Tc/my_owner (my_user2 revieved temporary and connect privileges from my_owner)
-------------------------------------
if after creation database nothing is done, then everyone can connect and when executing \l+ the column for privileges will be empty
to protect database, execute sql:
REVOKE CONNECT ON DATABASE "my-db" from public;
Then sql code for database in pgAdmin changed automatically to:
GRANT ALL ON DATABASE "my-db" TO my_owner;
GRANT TEMPORARY ON DATABASE "my-db" TO PUBLIC;
For info: superuser and db owner can connect always, but for multiuser db with multi schemas or read-only user, we need to give the connect right:
GRANT CONNECT ON DATABASE "my-db" TO my_user2;
GRANT CONNECT ON DATABASE "my-db" TO my_ro_user;
Tip: avoid privileges with empty after db creation or with =Tc/my_owner , so connect given to public, it should be =T/my_owner
-------------------------------------
Default public privilages (nothing before '=' sign means public):
=Tc/my_owner
in sql (in pgAdmin):
GRANT TEMPORARY, CONNECT ON DATABASE "my-db" TO PUBLIC; 
Tc=>TEMPORARY, CONNECT
=T/my_user
T=>TEMPORARY
in sql (in pgAdmin):
GRANT TEMPORARY ON DATABASE "my-db" TO PUBLIC;
----------------------------------------
All my_user privilages:
GRANT TEMPORARY ON DATABASE "my-db" TO PUBLIC; 
my_user=CTc/my_user
CTc=>C=create database,schema,tablespace; T=temporary; c=connect;
GRANT ALL ON DATABASE "my-db" TO my_user; --or if its owner
my_user2=c/my_user
GRANT CONNECT ON DATABASE "my-db" TO my_user2;

=============================
#connection details (show current user, server etc)
\conninfo
in sql:
select session_user, current_user;
#switch user
set role <other_user>;
=============================
GRANT ALL PRIVILEGES ON DATABASE grants the CREATE, CONNECT, and TEMPORARY privileges on a database to a role (users are properly referred to as roles). None of those privileges actually permits a role 
to read data from a table; SELECT privilege on the table is required for that.
==============================

The 'grant all privileges on all .. in .. to ..' works only on existing objects.
GRANT ALL ON table_name TO role_name;
GRANT ALL ON ALL TABLES TO role_name;
GRANT ALL ON ALL TABLES IN SCHEMA schema_name TO role_name;
GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO new_user;
GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO your_user;
--ALL TABLES also affects views and foreign tables
For the existing objects using loop:
see later
The 'grant all privileges on all .. in .. to ..' works only on existing objects. If the owner creates a new object, the other user will be denied access.
For the new future objects (to execute as owner myowner_acc of his future objects to give read-write access to myuser_rw_acc):
ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON SEQUENCES TO myuser_rw_acc;
ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON TABLES TO myuser_rw_acc;

For the new future objects of certain owner (if multiple owners in db, or to not touch postgres objects), but executing as super user, like postgres:
ALTER DEFAULT PRIVILEGES FOR USER myowner_acc IN SCHEMA public GRANT ALL ON SEQUENCES TO myuser_rw_acc;
ALTER DEFAULT PRIVILEGES FOR USER myowner_acc IN SCHEMA public GRANT ALL ON TABLES TO myuser_rw_acc;
===============================
--Grants for the existing objects using loop:
--Set rights to all existing tables:
DO
$$
DECLARE
    my_schemaname name :='public';
    tbl name;
    my_env TEXT :='_acc';
    my_db_owner TEXT :='my_owner_user_acc';
    my_admin_user TEXT :='my_owner_user_acc';
    my_schema_owner TEXT :='postgres';
    my_schema_ro_user TEXT :='my_user_ro_acc';
    my_schema_rw_user TEXT :='my_suser_rw_acc';
    my_table_owner TEXT :='my_owner_user_acc';
    my_db TEXT :=current_database();
BEGIN
           raise info 'START setting tables grants schema=% schema_owner=% db=%',  my_schemaname, my_schema_owner, my_db;
           FOR tbl IN SELECT tablename FROM pg_tables WHERE  schemaname=my_schemaname and tableowner=my_table_owner
           LOOP
             raise info 'START setting table grants tablename=%  schema=% table_owner=% ro=% db=%', tbl, my_schemaname, my_table_owner, my_schema_ro_user, my_db;
             BEGIN
             EXECUTE format('GRANT ALL ON TABLE %1$I.%2I TO %3$I;',  my_schemaname, tbl, my_schema_rw_user);
             raise info 'OK setting table grants tablename=%  schema=% table_owner=% ro=% db=%', tbl, my_schemaname, my_table_owner, my_schema_ro_user, my_db;
             EXCEPTION WHEN OTHERS THEN
             raise info 'ERROR setting tables grants schema=% table_owner=% ro=% db=%',  my_schemaname, my_table_owner, my_schema_ro_user, my_db;
             CONTINUE;
             END;
           END LOOP;
    END;
$$ LANGUAGE plpgsql;


---Set rights to all existing sequences
DO
$$
DECLARE
    my_schemaname name :='public';
    seqw name;
    my_env TEXT :='_acc';
    my_db_owner TEXT :='my_owner_user_acc';
    my_admin_user TEXT :='my_user_acc';
    my_schema_owner TEXT :='postgres';
    my_schema_ro_user TEXT :='my_user_ro_acc';
    my_schema_rw_user TEXT :='my_user_rw_acc';
    my_seq_owner TEXT :='my_owner_user_acc';
    my_db TEXT :=current_database();
BEGIN
           raise info 'START setting tables grants schema=% schema_owner=% db=%',  my_schemaname, my_schema_owner, my_db;
           FOR seqw IN SELECT sequencename FROM pg_sequences WHERE  schemaname=my_schemaname and sequenceowner=my_seq_owner
           LOOP
             raise info 'START setting table grants tablename=%  schema=% seq_owner=% ro=% db=%', seqw, my_schemaname, my_seq_owner, my_schema_ro_user, my_db;
             BEGIN
             EXECUTE format('GRANT ALL ON SEQUENCE %1$I.%2I TO %3$I;',  my_schemaname, seqw, my_schema_rw_user);
             raise info 'OK setting sequence grants seqname=%  schema=% seq_owner=% ro=% db=%', seqw, my_schemaname, my_seq_owner, my_schema_ro_user, my_db;
             EXCEPTION WHEN OTHERS THEN
             raise info 'ERROR setting sequence grants schema=% seq_owner=% ro=% db=%',  my_schemaname, my_seq_owner, my_schema_ro_user, my_db;
             CONTINUE;
             END;
           END LOOP;
    END;
$$ LANGUAGE plpgsql;


---Set rights to all existing views
DO
$$
DECLARE
    my_schemaname name :='public';
    vw name;
    my_env TEXT :='_acc';
    my_db_owner TEXT :='my_owner_user_acc';
    my_admin_user TEXT :='my_user_acc';
    my_schema_owner TEXT :='postgres';
    my_schema_ro_user TEXT :='my_user_ro_acc';
    my_schema_rw_user TEXT :='my_user_rw_acc';
    my_view_owner TEXT :='my_owner_user_acc';
    my_db TEXT :=current_database();
BEGIN
           raise info 'START setting view grants schema=% schema_owner=% db=%',  my_schemaname, my_schema_owner, my_db;
           FOR vw IN SELECT viewname FROM pg_views WHERE  schemaname=my_schemaname and viewowner=my_view_owner
           LOOP
             raise info 'START setting view grants viewname=%  schema=% view_owner=% ro=% db=%', vw, my_schemaname, my_view_owner, my_schema_ro_user, my_db;
             BEGIN
             EXECUTE format('GRANT ALL ON TABLE %1$I.%2I TO %3$I;',  my_schemaname, vw, my_schema_rw_user);
             raise info 'OK setting view grants viewname=%  schema=% view_owner=% ro=% db=%', vw, my_schemaname, my_view_owner, my_schema_ro_user, my_db;
             EXCEPTION WHEN OTHERS THEN
             raise info 'ERROR setting view grants schema=% view_owner=% ro=% db=%',  my_schemaname, my_view_owner, my_schema_ro_user, my_db;
             CONTINUE;
             END;
           END LOOP;
    END;
$$ LANGUAGE plpgsql;

---Set rights to all existing views
DO
$$
DECLARE
    my_schemaname name :='public';
    vw name;
    my_env TEXT :='_acc';
    my_db_owner TEXT :='my_owner_user_acc';
    my_admin_user TEXT :='my_user_acc';
    my_schema_owner TEXT :='postgres';
    my_schema_ro_user TEXT :='my_user_ro_acc';
    my_schema_rw_user TEXT :='my_user_rw_acc';
    my_view_owner TEXT :='my_owner_user_acc';
    my_db TEXT :=current_database();
BEGIN
           raise info 'START setting view grants schema=% schema_owner=% db=%',  my_schemaname, my_schema_owner, my_db;
           FOR vw IN SELECT viewname FROM pg_views WHERE  schemaname=my_schemaname and viewowner=my_view_owner
           LOOP
             raise info 'START setting view grants viewname=%  schema=% view_owner=% ro=% db=%', vw, my_schemaname, my_view_owner, my_schema_ro_user, my_db;
             BEGIN
             EXECUTE format('GRANT ALL ON %1$I.%2I TO %3$I;',  my_schemaname, vw, my_schema_rw_user);
             raise info 'OK setting view grants viewname=%  schema=% view_owner=% ro=% db=%', vw, my_schemaname, my_view_owner, my_schema_ro_user, my_db;
             EXCEPTION WHEN OTHERS THEN
             raise info 'ERROR setting view grants schema=% view_owner=% ro=% db=%',  my_schemaname, my_view_owner, my_schema_ro_user, my_db;
             CONTINUE;
             END;
           END LOOP;
    END;
$$ LANGUAGE plpgsql;
===========================================
--search path for a given role or database
SELECT r.rolname, d.datname, rs.setconfig
FROM   pg_db_role_setting rs
LEFT   JOIN pg_roles      r ON r.oid = rs.setrole
LEFT   JOIN pg_database   d ON d.oid = rs.setdatabase
WHERE  r.rolname = 'myrole' OR d.datname = 'mydb';
--search path for current user on current db
show search_path ;
--set search path for the current session
set search_path = "$user", public, postgis;
--set search path for db permanently 
alter database mydb set search_path = "$user", public, postgis ;
--set search path for role permanently
alter role johnny set search_path = "$user", public, postgis ;
--Attention: If there are entries in the search path for nonexistent schemas, then they are ignored.
========================================
--Show default privileges
select
 pg_get_userbyid(d.defaclrole) as user,
 n.nspname as schema,
 case d.defaclobjtype
   when 'r' then 'tables'
   when 'f' then 'functions'
   when 'S' then 'sequences'
   when 'T' then 'type'
   when 'n' then 'schema' end as object_type,
   array_to_string(d.defaclacl, ' + ') as default_privileges
from pg_catalog.pg_default_acl d
left join pg_catalog.pg_namespace n on n.oid = d.defaclnamespace;
--output
user | schema | object_type | default_privileges
u1   | public |tables       | u1_ro=rU/u1 + u2=arwdDxt/u1
--Explaination
user_which_objects | in_which_schema| which_object| which_other_user_who_recieve_grant=which_grants/grants_given_by + which_second_user_who_receive_grant=which_grants/grants_given_by
--To give grant for the future objects (changing the default privileges): u1 is owner of tables, u3 is reciever of grants
ALTER DEFAULT PRIVILEGES FOR USER u1 IN SCHEMA public GRANT SELECT ON TABLES TO u3;
--To give grant for the future objects (changing the default privileges): u1 is owner of tables, u3 is reciever of grants. Attention: should be connected as u1 than we can skip 'FOR USER u1'!!!
ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT ON TABLES TO u3;
=========================================


