Master server=source db
Replica/standby server=target db

Replication reasons:
*High availability
*load balancing (read-write on master, read-only on replica)
*disaster recovery 
*data migration

Replica server (one or multiple):
*Warm standby (no connections are allowed from users)
*Hot standby  (read-only connections from users)

Replication types:
*Physical replication
  * file based log schipping
  * streaming replication
  * all databases included (all or none)
  * no possible between 2 diff major versions
  * no possible between 2 diff platforms (windows vs linux)
*Logical replication
  * data based (data objects and their changes)
  * table level is possible

Replication modes:
*Asynchronous
   * replication lag=replica is out of sync with master for certain duration
   * data loss when master is crashed
   * no waits on transactions, better performance
*Synchronous
   * transactions are complete when they are replicated (waits, lower performance)
   * no data loss when master is crashed

Replication models:
*Single Master Replication
   * 1 master and >=1 replica's
   * unidirectional (data flows from master to replica's)
   * replica data is read-only
*Multi Master Replication
   * >1 master 
   * bidirectional (data flows in both directions)
   * conflict resolution schemas employed
#===========================================================
#Repmgr
Repmgr=command line tool
Repmgrd=replication deamon (supports automatic failover)
Node=single postgres server (primary or standby)
Upstream node=node that standby connects to for receiving streaming replication (primary or standby in case of cascading replication)
------------------------------
Repmgr installation (on PRIMARY and STANDBY):
yum list modules repmgr*
yum -y install repmgr12.x86_64
-- (version 5.2) will be installed

------------------------------
On db1 PRIMARY/MASTER
1 Create user repmgr
  su - postgres
  createuser -s repmgr
  psql -c "alter user repmgr with password 'hdf456hw';"
  createdb repmgr -O repmgr
  psql -c 'alter user repmgr set search_path TO repmgr, "$user", public;'
2 Config: /var/lib/pgsql/12/data/postgresql.conf
  listen_addresses = '*'
  max_wal_senders = 5
  wal_keep_segments = 5
  wal_level = replica
  fsync = on
  wal_log_hints = on
  archive_mode = on
  archive_command = '/bin/true'
  hot_standby = on
  shared_preload_libraries = 'repmgr'
On db1 PRIMARY/MASTER and db2 STANDBY/SLAVE
3 /var/lib/pgsql/12/data/pg_hba.conf
local replication repmgr md5
host replication repmgr 127.0.0.1/32 md5
host replication repmgr <primary_ip>/32 md5
host replication repmgr <slave_ip>/32 md5

local repmgr repmgr md5
host repmgr repmgr 127.0.0.1/32 md5
host repmgr repmgr <primary_ip>/32 md5
host repmgr repmgr <slave_ip>/32 md5

4 Add pgpass file on both servers
   su - postgres
   echo "*:*:*:repmgr:<repmgr_pass>" > ~/.pgpass
   chmod 600 ~/.pgpass
5 On db1 PRIMARY/MASTER /etc/repmgr/12/repmgr.conf
  node_id=1
  node_name=db1_host
  conninfo='host=<primary_ip> user=repmgr dbname=repmgr connect_timeout=2'
  data_directory='/var/lib/pgsql/12/data/'
  pg_bindir='/usr/pgsql-12/bin/'
  promote_command='/usr/pgsql-12/bin/repmgr primary promote -f /etc/repmgr/12/repmgr.conf'
  follow_command='/usr/pgsql-12/bin/repmgr primary follow -f /etc/repmgr/12/repmgr.conf'  
6 On db2 STANDBY/SLAVE repmgr.conf          
  node_id=2
  node_name=db2_host
  conninfo='host=<slave_ip> user=repmgr dbname=repmgr connect_timeout=2'
  data_directory='/var/lib/pgsql/12/data/'
  pg_bindir='/usr/pgsql-12/bin/'
  promote_command='/usr/pgsql-12/bin/repmgr standby promote -f /etc/repmgr/12/repmgr.conf'
  follow_command='/usr/pgsql-12/bin/repmgr standby follow -f /etc/repmgr/12/repmgr.conf'
7 On db1 PRIMARY/MASTER
  repmgr -f repmgr.conf primary register
8 Check db1 PRIMARY/MASTER act as primary
  repmgr -f repmgr.conf cluster show
9 On db2 STANDBY/SLAVE (first cloning)
  systemctl stop postgresql-12
  rm -r /var/lib/pgsql/12/data # remove or move if you need to keep old data
  repmgr -h <primary_ip> -U repmgr -d repmgr -f /etc/repmgr/12/repmgr.conf standby clone --dry-run
  repmgr -h <primary_ip> -U repmgr -d repmgr -f /etc/repmgr/12/repmgr.conf standby clone -F
  systemctl start postgresql-12
  repmgr  -f /etc/repmgr/12/repmgr.conf standby register
10 check db2 replication cluster works
  repmgr -f repmgr.conf cluster show
11 replication deamon start if needed
   repmgrd  -f /etc/repmgr/12/repmgr.conf
12 Monitoring via query psql -x
   select * from pg_stat_replication;
#====================================================
