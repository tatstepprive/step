#rename link
for i in $(find -iname privORINT-BCSSKSZ.ppk -type l); do mv $(dirname $i)/$(basename $i) $(dirname $i)/privORINT-BCSSKSZ.ppk; done
#==============================
# find broken soft links
find . | xargs file | grep -i "broken symbolic link"
#==============================
#show cpu
sudo lshw| grep -i cpu
#============================== 
#quit bash shell without saving history: kill console
kill -9 $$
#quit bash shell without saving history: unset HISTFILE
unset HISTFILE && exit
#============================== 
#test sftp connection
sftp -vvvv -oIdentityFile=/path/to/private/keyfile.ppk user@host
#==============================
#test ftp connection, can not use user@host
#give user as input, give
#consult man ftp 
ftp --vvvv host
#=============================
# tree versus on window is find, 
#go to dir to execute list of dirs and files and execute find
find
#============================= 
#remove file containing started dashes
#Instead of doing rm -log you simply add ./ to the start and run this 
rm ./-log.txt
#=============================
#using curl
curl -H "Accept: application/json" https://icanhazdadjoke.com/
curl -H "Accept: text/plain" https://icanhazdadjoke.com/
#=============================
#create md5 hash, option -n to not include newline produced by echo
echo -n 'blablaandbla' | md5sum
#create integrity hash for compressed postgres dump
md5sum export_T2020122214u09m43s.dump
#============================
#search in pdf file with grep
pdfgrep -in max_conn file.pdf
#===========================
#network diagnostic tool mtr hostname
mtr www.google.be
#==========================
#ubuntu open pdf file 
#or define alias open=xdg-open in .bashrc and use open file.pdf
xdg-open file.pdf
#=========================
#show list of aliases
alias
#define alias: alias alias_name="alias_commandos"
alias info="uname; date;"
alias c=clear
alias rm="rm -iv"
#show info for one alias
alias rm
#run alias
rm my_file
#run commando once without using alias
\rm my_file
#unset alias for future commands
unalias rm
#Diff between alias and function:
#alias do not take args as function do
#if command is defined as alias and function, alias takes precedence
#=========================
#show list of functions
typeset -f
#show list of functions names 
typeset F
#create function: function func_name [()] {commands;}
function numb { who | wc -l; }
#run function
numb
#remove function
unset -f numb
#add function permanently, edit .bash_profile
#=========================
#show shell options (about 27 different options)
set -o
#turn ON an option, use minus: set -o option_name
set -o noclobber
#turn OFF an option, use plus: set +o option_name
set +o noclobber
#temporary deactivate the noclobber option, use: >|
date >| timeline.txt
#to set options permanent edit .bashrc file
#=========================
#iptables (tip: add port to iptables after install centos server exp: to make connection in browser)
iptables --lin -vnL
iptables -t nat --lin -vnL
iptables -t mangle --lin -vnL
iptables -S
iptables -t nat -S
iptables -t mangle -S
iptables -A INPUT -m state --state NEW -m tcp -p tcp --dport 8081 -j ACCEPT
iptables-save
#change-order-iptables-rules
sudo iptables-save > /tmp/iptables.txt
sudo nano /tmp/iptables.txt
sudo iptables-restore < /tmp/iptables.txt
iptables --lin -vnL
iptables-save
#delete entry (flag -D for delete)
iptables -D INPUT -m state --state NEW -m tcp -p tcp --dport 8081 -j ACCEPT
iptables --lin -vnL
#==========================
#show port usage
netstat -tulpn | grep 8081
ss -tulpn | grep ssh
ss -tulpn | grep 22
netstat -tulpn | grep -w 22
#==========================
#add sudo user centos commandline
adduser username
passwd username
sudo groupadd NAME-OF-THE-NEW-GROUP
usermod -a -G wheel username
#===========================
#sed examples (usage: replace, find and delete, remove empty lines, show output limited by lines etc)
#replace Bla par Spa in memory, no changes to the file
sed 's/Bla/Spa/g' filename 
#replace Bla par Spa in file and save file, see -i option 
sed -i 's/Bla/Spa/g' filename 
#replace string by nothing, remove string in file
sed -i 's/Bla//g' filename
#remove line containing string in file
sed -i '/Bla/d' file
#remove empty lines in file (^ is started with and $ is endline
sed -i '/^$/d' file
#remove 1 line in file
sed -i '1d' file
#replace tabs par space in file
sed -i 's/\t/ /g' file
#show from line 12 till 18
sed -n 12,18p file
#show all lines except line 12-18, attention no -i option so nothing is saved
sed 12,18d file
#replace Bla par Spa except on line 9
sed -i '9!s/Bla/Spa/g' file
#replace in vi editor by typing
:%s/Bla/Spa/g
#using variables with sed is using double quotes
myvar1="bla"; myvar="spa"; myfile=test.txt 
sed -i "s/$myvar/$myvar/g" "$myfile"
#quote text => result "quote me" in file
sed -i "s/quote me/\"&\"/" file
# if myvar contains / then use other delimiter of your choise like in expl
# the myvar should not contain this delimiter char
sed -i "s|$myvar|bla|g" file
#======================================
#Issue  /bin/bash^M: bad interpreter: No such file or directory when from window to linux
sed -i -e 's/\r$//' scriptname.sh
#======================================
https://tldp.org/HOWTO/Bash-Prompt-HOWTO/
#======================================
# Math calculation on bash command line
echo 300*1.5+22 | bc
#======================================
w: show who is logged on and what they are doing
who: show who is logged on
tty: show current users pseudo terminal
ps -ft pts/1: get process id for the pseudo terminal
Kill the process: kill 28580
Alternatively use pkill -t pts/1
#=======================================
#create archive: tar [options] archfile filenames
#create archive, attention no '-' before the options cfv, it's optional
tar cvf data.tar backup/
#create archive with z compresson, attention no '-' before the options cfv
tar cvzf data2.tar.gz backup/
#create archive with j compresson, attention no '-' before the options cfv
tar cvjf data3.tar.bz2 backup/
#show data in archive
tar tvf data.tar
#extract archive, attention move archive data.tar in other dir and extract, if not it will overwrite the existing data
#result backup dir is extracted with all files in it
tar xvf data.tar
tar xvf data.tar.gz
#extract a single file
tar xvf data.tar path_in_archive/myfile.txt
#=======================================
#Zip tools: gzip, bzip2 (linux), zip (linux,windows)
#uncompress tools: gzip with d option, gunzip, unzip, bunzip2 
gunzip myfile.gz;
gzip -d myfile.gz; 
unzip myfile.zip;
bunzip2 myfile.bz2 
#view: zcat, bzcat 
zcat myfile.gz
bzcat myfile.bz2
#=======================================
#encrypt zip
echo "test"| gpg --batch --no-tty --yes --passphrase-fd 0 --force-mdc --symmetric bla.tar.gz

#decrypt zip
echo "test" | gpg --batch --no-tty --yes --quiet --force-mdc --no-mdc-warning --ignore-mdc-error --passphrase-fd 0 --multifile --decrypt  bla.tar.gz.gpg
#======================================
#encryp zip 
zip --encrypt myzip.zip test2.txt
#input pass
#input verify pass
#decryp zip
unzip myzip.zip
#pass
#=====================================
#show file timestamp or statistics
stat filename.txt
#change timestamp of existing file
touch -d 20120101 old_zip_encrypt.sh
#change timestamp of existing file
touch -a -m -t 201512180130.09 fileName.txt
#=====================================
#Show memory usage with command, and cycle between KiB, MiB, GiB using capital "E" 
top
#====================================
#Show top memory processes
ps aux --sort -rss | head
ps -eo pid,ppid,%mem,%cpu,cmd --sort=-%mem | head
#Show top 20 memory processes
ps aux --sort -rss | head -n 20
#====================================
#compress file: 
#gzip will create a file filename.gz and delete the original file.
gzip filename
#verbose output: shows percentage reduction
gzip -v filename
#compress file -1 --fast or -9 --best
gzip -9 filename
#compress dir
gzip -r dirname
#uncompress/decompress file 
gzip -d filename.gz
gzip -d filename1.gz filename2.gz filename3.gz
#list compressed file content
gzip -l filname
#====================================
#sync the content between 2 servers. To execute on my_host1
rsync -azP my_user@my_host2:/var/lib/jenkins/jobs/ /var/lib/jenkins/jobs
#====================================
#remove last comma
MY_I=123,
MY_I=$(echo $MY_I|sed 's/,$//')
#remove first comma
MY_I=,456
MY_I=$(echo $MY_I|sed 's/^,//')
#====================================
#to uppercase/lowercase
name='alice'
#first char to uppercase
echo ${name^}
#all to uppercase
echo ${name^^}
string="A FEW WORDS"
#first char to lowercase
echo "${string,}"
#all to lowercase
echo "${string,,}"
#====================================
#using man pages navigation
#h = help , desc of all scrolling capabilities
#space bar= displays next screen of a man page
#return/enter=displays the next line of a man page
#b=moves back one full screen of the man pages
#g=returns to the top of the man pages
#G=returns to the bottom of the man pages
#/pattern=search forward for a pattern
#?pattern=search backward for a pattern
#n=find the next occurrence
#N=changes the direction of the search
#q=quit the man pages
#=====================================
#Brace expansion (brace={})
echo a{d,c,b}e
#output
ade ace abe
#----------
#create multiple files
touch file{a,b,c}
ls
#output
filea fileb filec
#----------
#remove multiple files
rm -v file{a,b,c}
#----------
#create multiple dirs
mkdir -v dir{1..5}
ls
#output
dir1 dir2 dir3 dir4 dir5
#------
#remove multiple dirs
rmdir -v dir{1..5}
#=====================================
#Question mark expansion ?=match one char
ls dir?
#output 
dira dirb
#=====================================
#Square brackets [] expansion
#set of chars [abc]: a or b or c 
#range of chars [a-b]: all lower case chars
echo a[dcb]e
#touch and echo do not work to create multiple files
#====================================
#shell prompt string PS1 
#to customize PS1='[\u@\h \W]\$'
#to customize with color and git recognition 
#PS1=\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]$(eval "echo ${MYPS}")\[\033[00m\]\[\e[0;36m\] $git_branch\[\e[0;31m\]$git_dirty\[\e[0m\]\$ 
#===================================
#user env 
#when login: /etc/profile, ~/.bash_profile, ~/.bash_login, ~/.bashrc, /etc/bashrc, ~/.profile
#when logout: ~/.bash_logout
#==================================
#             File          Dir
# 4 r  view, copy (cat,cp)  ls
# 2 w  edit [if +r]         edit [if +x] (rm)
# 1 e  exec script          navigate, show detail (cd, ls -l)
#=================================
#change group of the file
chgrp file_name
#================================
#permission change symbolic mode: chmod who_operation_perm filename (who=u,g,o,a [user/owner,group,other,all] operation=+,-= [add,remove,exactly] perm=r,w,x,s (read,write,execute,exec as setgid setguid)
chmod u+x my_script.sh
chmod o-r my_file.txt
chmod u=rw,g=r,o= my_file.txt
#remove sticky permission (t will become x), dont do it in real 
chmod o-t /tmp/
#add sticky permission (on /tmp is per default), meaning only root or owner can delete file and not everyone, but /tmp can everyone read/write, so to protect files from removal from dir
chmod o+t /tmp/
#===============================  
#permission change octal mode: chmod numbers filename (who=u,g,o,a [numbers=r4,w2,x1, ugo place, 0=---, 1=--x, 2=-w-, 3=2+1=-wx, 4=r--, 5=4+1=r-x, 6=4+2=rw-, 7=4+2+1=rwx )
#444 r--r--r-- (read only by all file)
#600 rw-------
#640 rw-r-----
#644 rw-r----r
#664 rw-rw-r-- (default on file)
#666 rw-rw-rw  (max permissions on file)
#750 rwxr-x---
#751 rwxr-x--x
#755 rwxr-xr-x 
#775 rwxrwxr-x (default on dir)
#777 rwxrwxrwx (max permissions on dir)
#==============================
#umask
#--output
#0002
#1perm on 
#2perm owner
#3perm group
#4perm other
#umask meaning
#umask	file	dir  action
# 0	rw-	rwx  nothing remove/mask
# 1	rw-	rw-  remove/mask x=1
# 2     r--	r-x  remove/mask w=2
# 3	r--	r--  remove/mask wx=3
# 4	-w-	-wx  remove/mask r=4
# 5	-w-	-w-  remove/mask rx=5
# 6	---	--x  remove/mask rw=6
# 7	---	---  remove/mask all rwx=7
#Default umask is 00002, change to more secure (nothing for others, no write for group). As default can be set in home dir .bash_profile or genenal in /etc/profile
umask 027
#==============================
#show dir permissions
ls -ld /dir_name
#==============================
